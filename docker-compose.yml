version: '3'

services:
  zookeeper:
    image: zookeeper:3.7.0
    container_name: zookeeper
    ports:
      - "2181:2181"

  kafka:
    depends_on:
      - zookeeper
    image: wurstmeister/kafka
    container_name: kafka
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_ADVERTISED_HOST_NAME: localhost
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "crypto-prices:1:1"

  schema-registry:
    container_name: schema-registry
    image: confluentinc/cp-schema-registry:5.5.3
    depends_on:
      - zookeeper
      - kafka
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: "zookeeper:2181"

  control-center:
    image: confluentinc/cp-enterprise-control-center:5.4.0
    hostname: control-center
    container_name: control-center
    depends_on:
      - zookeeper
      - kafka
      - schema-registry
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'kafka:9092'
      CONTROL_CENTER_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      PORT: 9021

  delta_pyspark:
    build:
      context: .
      dockerfile: delta_spark_jupyter/delta_spark.Dockerfile
    container_name: delta_pyspark
    volumes:
      - ./delta_spark_jupyter/src:/src
    ports:
      - "8888:8888"
    restart: on-failure
    command: /bin/sh -c "jupyter lab --ip='0.0.0.0' --port=8888 --NotebookApp.token='' --no-browser --allow-root"
    env_file:
      - producer/producer_confs.env

  producer_service:
    restart: on-failure
    container_name: producer_service
    depends_on:
      - createbuckets
      - schema-registry
    build:
      context: producer
      dockerfile: producer_service.Dockerfile
    env_file:
      - producer/producer_confs.env

  minio:
    container_name: minio
    restart: "always"
    image: minio/minio:RELEASE.2022-02-17T23-22-26Z
    env_file:
      - minio/minio.env
    ports:
      - "9000:9000"
      - "9001:9001"
    command: minio server --console-address ":9001" /minio_data_lake

  createbuckets:
    image: minio/mc:RELEASE.2022-02-23T03-15-59Z
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc alias set myminio http://minio:9000 crypto-prices crypto-prices;
      /usr/bin/mc mb myminio/crypto-prices;
      /usr/bin/mc policy set public myminio/crypto-prices;
      exit 0;
      "

  # Hadoop
  namenode:
    container_name: namenode
    image: johannestang/hadoop-namenode:2.0.0-hadoop2.8.5-java8
    restart: always
    environment:
      - CLUSTER_NAME=bigdata1
    env_file:
      - hive_presto/hadoop-hive.env
    ports:
      - "50070:50070"

  datanode:
    container_name: datanode
    image: johannestang/hadoop-datanode:2.0.0-hadoop2.8.5-java8
    restart: always
    env_file:
      - hive_presto/hadoop-hive.env
    environment:
      SERVICE_PRECONDITION: "namenode:50070"
    ports:
      - "50075:50075"

  hive-server:
    container_name: hive-server
    image: johannestang/hive:2.3.6-postgresql-metastore-s3
    restart: always
    env_file:
      - hive_presto/hadoop-hive.env
    environment:
      HIVE_CORE_CONF_javax_jdo_option_ConnectionURL: "jdbc:postgresql://hive-metastore/metastore"
      SERVICE_PRECONDITION: "hive-metastore:9083"
      HDFS_CONF_fs_s3a_access_key: "crypto-prices"
      HDFS_CONF_fs_s3a_secret_key: "crypto-prices"
    ports:
      - "10000:10000"
      - "10002:10002"

  hive-metastore:
    container_name: hive-metastore
    image: johannestang/hive:2.3.6-postgresql-metastore-s3
    restart: always
    env_file:
      - hive_presto/hadoop-hive.env
    command: /opt/hive/bin/hive --service metastore
    environment:
      SERVICE_PRECONDITION: "namenode:50070 datanode:50075 hive-metastore-postgresql:5432"
      HDFS_CONF_fs_s3a_access_key: "crypto-prices"
      HDFS_CONF_fs_s3a_secret_key: "crypto-prices"
    ports:
      - "9083:9083"
  hive-metastore-postgresql:
    container_name: hive-metastore-postgresql
    image: bde2020/hive-metastore-postgresql:2.3.0

  presto-coordinator:
    container_name: presto-coordinator
    image: johannestang/prestodb:326
    restart: always
    ports:
      - "8080:8080"
    environment:
      S3_ACCESS_KEY: "crypto-prices"
      S3_SECRET_KEY: "crypto-prices"
      S3_ENDPOINT: "http://minio:9000"
    volumes:
      - ./hive_presto/presto:/opt/presto/etc

  hue:
    container_name: hue
    image: johannestang/hue:4.5.0-presto326
    restart: always
    depends_on:
      - hue-postgres
    ports:
      - "8889:8888"
    volumes:
      - ./hue/config/hue.ini:/usr/share/hue/desktop/conf/z-hue.ini

  hue-postgres:
    container_name: hue-postgres
    image: postgres:10
    restart: always
    environment:
      POSTGRES_DB: hue
      POSTGRES_PASSWORD: hue
      POSTGRES_USER: hue

  superset:
    container_name: superset
    image: amancevice/superset:0.35.1
    restart: always
    depends_on:
      - superset-postgres
      - superset-redis
    ports:
      - "8088:8088"
    volumes:
      - ./superset/config/superset.py:/etc/superset/superset.py

  superset-redis:
    container_name: superset-redis
    image: redis:3.2
    restart: always

  superset-postgres:
    container_name: superset-postgres
    image: postgres:10
    restart: always
    environment:
      POSTGRES_DB: superset
      POSTGRES_PASSWORD: superset
      POSTGRES_USER: superset

